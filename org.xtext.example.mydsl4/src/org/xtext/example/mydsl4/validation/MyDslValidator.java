/*
 * generated by Xtext 2.36.0
 */
package org.xtext.example.mydsl4.validation;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

import org.eclipse.xtext.validation.Check;
import org.xtext.example.mydsl4.myDsl.Condition;
import org.xtext.example.mydsl4.myDsl.Model;
import org.xtext.example.mydsl4.myDsl.MyDslPackage;
import org.xtext.example.mydsl4.myDsl.RobotDefinition;
import org.xtext.example.mydsl4.myDsl.SimulateStatement;
import org.xtext.example.mydsl4.myDsl.TaskDefinition;
import org.xtext.example.mydsl4.myDsl.TaskStatement;
import org.xtext.example.mydsl4.myDsl.TeamDefinition;
import org.xtext.example.mydsl4.myDsl.Team_goal_or_task;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class MyDslValidator extends AbstractMyDslValidator {
	
	@Check
    public void checkUniqueNames(Model model) {
        Set<String> names = new HashSet<>();

        for (Team_goal_or_task team_goal_or_task : model.getStatements()) {
            if (!names.add(team_goal_or_task.getName())) {
                error("Duplicate team_goal_or_task name: " + team_goal_or_task.getName(), team_goal_or_task, MyDslPackage.Literals.TEAM_GOAL_OR_TASK__NAME);
            }
        }
    }
	
	@Check
    public void checkRobotPlacement(Model model) {
		Set<String> coordinates = new HashSet<>();

        for (Team_goal_or_task team_goal_or_task : model.getStatements()) {
            if (team_goal_or_task instanceof TeamDefinition) {
            	TeamDefinition team = (TeamDefinition) team_goal_or_task;

            	for(RobotDefinition robot : team.getRobots()) {
	                String robotCoordinates = robot.getX() + "," + robot.getY();
	                if(!coordinates.add(robotCoordinates)) {
	                    warning("Two robots at the same coordinates! " + robot.getName(), robot, MyDslPackage.Literals.ROBOT_DEFINITION__NAME);
	                }
            	}
            }
        }
    }

	@Check
    public void checkRobotExists(Model model) {
		HashMap<TeamDefinition,Set<RobotDefinition>> teamsToRobots = new HashMap<>();

        for (Team_goal_or_task team_goal_or_task : model.getStatements()) {
            if (team_goal_or_task instanceof TeamDefinition) {
            	TeamDefinition team = (TeamDefinition) team_goal_or_task;

            	for(RobotDefinition robot : team.getRobots()) {
            		if(!teamsToRobots.containsKey(team)) {
            			teamsToRobots.put(team, new HashSet<>());
            		}
            		teamsToRobots.get(team).add(robot);
            	}
            }
        }

        for (Team_goal_or_task team_goal_or_task : model.getStatements()) {
        	if (team_goal_or_task instanceof TaskDefinition) {
        		TaskDefinition task = (TaskDefinition) team_goal_or_task;
        		Condition condition = task.getCondition();
        		if(usesImaginaryRobot(condition,teamsToRobots)) {
                    error("Robot " + condition.getRobot() +"  is not part of team"+ condition.getTeam() + "! ", condition, MyDslPackage.Literals.CONDITION__ROBOT);
        		}
        		
        		for(TaskStatement action  : task.getStatements()) {
        			if(action.getRobot() != null && 
        					(!teamsToRobots.containsKey(action.getTeam()) ||
        							!teamsToRobots.get(action.getTeam()).contains(action.getRobot())
        					)
        				)
        			{
                        error("Robot " + action.getRobot() +"  is not part of team"+ action.getTeam() + "! ", action, MyDslPackage.Literals.TASK_STATEMENT__ROBOT);
        			}
        		}
        	}
        }
        
		SimulateStatement simulate = model.getSimulate();
		Condition condition = simulate.getCondition();
		if(usesImaginaryRobot(condition,teamsToRobots)) {
            error("Robot " + condition.getRobot() +"  is not part of team"+ condition.getTeam() + "! ", simulate, MyDslPackage.Literals.SIMULATE_STATEMENT__CONDITION);
		}
    }
	
	public boolean usesImaginaryRobot(Condition condition,HashMap<TeamDefinition,Set<RobotDefinition>> teamsToRobots) {
		return condition != null && condition.getRobot() != null && 
				(!teamsToRobots.containsKey(condition.getTeam()) ||
						!teamsToRobots.get(condition.getTeam()).contains(condition.getRobot())
			    );
		  	
	}
}
