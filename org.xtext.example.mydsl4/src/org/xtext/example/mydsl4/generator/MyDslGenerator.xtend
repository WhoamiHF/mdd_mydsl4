/*
 * generated by Xtext 2.36.0
 */
package org.xtext.example.mydsl4.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl4.myDsl.TeamDefinition
import org.xtext.example.mydsl4.myDsl.GoalDefinition
import org.xtext.example.mydsl4.myDsl.TaskDefinition
import org.xtext.example.mydsl4.myDsl.Condition
import org.xtext.example.mydsl4.myDsl.TaskStatement
import org.xtext.example.mydsl4.myDsl.SimulateStatement
import java.io.File
import java.nio.file.Files
import java.io.IOException

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		copyFiles(fsa);
		
		fsa.generateFile('Test.java', generateFirstPart() + 
			generateTeamInfo(resource) + 
			generateGoalInfo(resource) +
			generateTasks(resource) +  
			generateSimulateStatement(resource) +
			generateTaskAdditionToSimulation(resource) +
            generateLastPart()
       	)
	}
	
	def copyFiles(IFileSystemAccess2 fsa) {
		val filesToCopy = #['Action.java','ActionType.java','Condition.java',
		'ConditionType.java','Goal.java','NamedElement.java','Position.java',
		'PositionedElement.java','Robot.java','Simulation.java','Task.java','Team.java']
		 
		for (file : filesToCopy) {
        	copyOneFile(fsa, file)
    	}
	}

	def copyOneFile(IFileSystemAccess2 fsa, String fileName) {
	    val fileToCopy = new File('classesToCopy/' + fileName)
	
	    var String content
	    try {
	        content = Files.readString(fileToCopy.toPath)
	    } catch (IOException e) {
	        e.printStackTrace
	        return
	    }
	
	    try {
	        fsa.generateFile(fileName, IFileSystemAccess2.DEFAULT_OUTPUT, content)
	    } catch (Exception e) {
	        e.printStackTrace
	    }
	}
	
	def generateFirstPart(){
		return '''
        package cz.cuni.mff.mdd.term;

        public class Test {
            public static void main(String[] args) {
        '''
	}
	
	def generateTeamInfo(Resource resource){
		return "\t\t// Add Teams of Robots\n" + resource.allContents
            .filter(typeof(TeamDefinition))
            .map[team |
				"\t\t// Add Teams " + team.name + "\n" +
                "\t\t" + "Team " + team.name + ''' = new Team("''' + team.name + '''");'''
                 + team.robots.map[robot |
                    "\n\t\t" + team.name + '''.robots.add(new Robot("''' + robot.name + '''", new Position(''' + robot.x + ''', ''' + robot.y + ''')));'''
                ].join('') + "\n"
            ].join('\n')
	}
	
	def generateGoalInfo(Resource resource){
		return 
			"\n\t\t// Add Goals\n" +
			resource.allContents
            .filter(typeof(GoalDefinition))
            .map[goal |
            	"\t\t// Add Goal " + goal.name + "\n" +
                "\t\tGoal " + goal.name + ''' = new Goal("''' + goal.name + '''", new Position(''' + goal.x + ''', ''' + goal.y + ''')));''' + "\n"
            ].join('\n')
	}
	
	/*
	 * // Add Tasks
// Add Task moveR1ToG1
Task moveR1ToG1 = new Task("moveR1ToG1", new Condition(Team1.getRobotByName("R2"), ConditionType.isLessThan, G1, 5));
moveR1ToG1.actions.add(new Action(Team1.getRobotByName("R1"), ActionType.moveTo, G1));
// Add Task moveAllTeams
Task moveAllTeams = new Task("moveAllTeams", new Condition(Team2.getRobotByName("R4"), ConditionType.isGreaterThan, G2, 10));
moveAllTeams.actions.add(new Action(Team1.getRobotByName("R2"), ActionType.moveTo, G2)); moveAllTeams.actions.add(new Action(Team2, ActionType.moveTo, G1 ));
// Add Task turnOffTeam2
Task turnOffTeam2 = new Task("turnOffTeam2");
turnOffTeam2.actions.add(new Action(Team2, ActionType.turnOff));
	 */
	 
	def generateTasks(Resource resource){
		return 
			"\n\t\t// Add Tasks\n" +
			resource.allContents
            .filter(typeof(TaskDefinition))
            .map[task |
            	"\t\t// Add Task " + task.name + "\n" +
              	"\t\tTask " + task.name + ''' = new Task("''' + task.name + '''"''' +
                		 (task.condition !== null ? "," + generateCondition(task.condition) : "") + ''');
                ''' + task.statements.map[action | generateAction(task,action)].join('\n\n')
            ].join('\n\n');
	} 
	
	//moveAllTeams.actions.add(new Action(Team1.getRobotByName("R2"), ActionType.moveTo, G2));
	// moveAllTeams.actions.add(new Action(Team2, ActionType.moveTo, G1 ));
	
	def generateAction(TaskDefinition task, TaskStatement action){
		return 
		 "\t\t" + task.name + '''.actions.add(new Action(''' + action.team + generateGetRobot(action) +  generateActionType(action) + '''));'''
	}
	
	def generateActionType(TaskStatement action){
		if(action.statement !== null){
			return ''', ActionType.moveTo, ''' + action.statement.goal;
		}
		else{
			return ''', ActionType.turnOff''';
		}
	}
	
	//,new Condition(Team1.getRobotByName("R2"), ConditionType.isLessThan, G1, 5));
	def generateCondition(Condition condition){
		if(condition === null){
			return "";
		}
		
		return "new Condition(" + condition.team + generateGetRobot(condition) +
				", ConditionType." + condition.comparator + ", " + condition.goal +
				 "," + condition.distance + ")";
	}
	
	def generateGetRobot(Condition condition){
		if(condition.robot === null){
			return "";
		}
		return ".getRobotByName(\"" + condition.robot + "\")";
	}	
	
	def generateGetRobot(TaskStatement statement){
		if(statement.robot === null){
			return "";
		}
		return ".getRobotByName(\"" + statement.robot + "\")";
	}	
	
	/*
	 * Simulation simulation = new Simulation(new Condition(Team2.getRobotByName("R4"), ConditionType.isEqual, G1, 0));
	 */
	def generateSimulateStatement(Resource resource){
		return "\n\n\t\t// Add the Simulation\n" + resource.allContents
            .filter(typeof(SimulateStatement))
            .map[simulate |
                "\t\tSimulation  simulation = new Simulation(" + generateCondition(simulate.condition) + '''));''' + "\n"
            ].join('');
	}
	
	/*
	 * simulation.tasks.add(moveR1ToG1); 
	 * simulation.tasks.add(moveAllTeams);
	 */
	def generateTaskAdditionToSimulation(Resource resource){
		return resource.allContents
            .filter(typeof(TaskDefinition))
            .map[task |
                "\t\tsimulation.tasks.add(" + task.name +  ''');'''
            ].join('\n');
	}
	 
	/*
	 * simulation.run();
	 * end of main, end of class
	 */
	def generateLastPart(){
		return '''

		  		simulation.run();
		  	}
		  }
    	'''
	}
}
