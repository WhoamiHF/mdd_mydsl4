/*
 * generated by Xtext 2.36.0
 */
package org.xtext.example.mydsl4.scoping;


import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.xtext.example.mydsl4.myDsl.Condition;
import org.xtext.example.mydsl4.myDsl.MyDslPackage;
import org.xtext.example.mydsl4.myDsl.TaskStatement;
import org.xtext.example.mydsl4.myDsl.TeamDefinition;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class MyDslScopeProvider extends AbstractMyDslScopeProvider {

	public IScope getScope(EObject context, EReference reference) {
        if (reference == MyDslPackage.Literals.TASK_STATEMENT__ROBOT ||
            reference == MyDslPackage.Literals.CONDITION__ROBOT) {
            
        	if (context instanceof TaskStatement) {
                TaskStatement taskStatement = (TaskStatement) context;
                TeamDefinition team = taskStatement.getTeam();
                if (team != null) {
                    return Scopes.scopeFor(team.getRobots());
                }
            } else if (context instanceof Condition) {
                Condition condition = (Condition) context;
                TeamDefinition team = condition.getTeam();
                if (team != null) {
                    return Scopes.scopeFor(team.getRobots());
                }
            }
        }
        
        return super.getScope(context, reference);
    }
}
