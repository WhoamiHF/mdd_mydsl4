/*
 * generated by Xtext 2.36.0
 */
package org.xtext.example.mydsl4.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl4.myDsl.Condition;
import org.xtext.example.mydsl4.myDsl.GoalDefinition;
import org.xtext.example.mydsl4.myDsl.Model;
import org.xtext.example.mydsl4.myDsl.MoveToStatement;
import org.xtext.example.mydsl4.myDsl.MyDslPackage;
import org.xtext.example.mydsl4.myDsl.RobotDefinition;
import org.xtext.example.mydsl4.myDsl.RunStatement;
import org.xtext.example.mydsl4.myDsl.SimulateStatement;
import org.xtext.example.mydsl4.myDsl.TaskDefinition;
import org.xtext.example.mydsl4.myDsl.TaskStatement;
import org.xtext.example.mydsl4.myDsl.TeamDefinition;
import org.xtext.example.mydsl4.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case MyDslPackage.GOAL_DEFINITION:
				sequence_GoalDefinition(context, (GoalDefinition) semanticObject); 
				return; 
			case MyDslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case MyDslPackage.MOVE_TO_STATEMENT:
				sequence_MoveToStatement(context, (MoveToStatement) semanticObject); 
				return; 
			case MyDslPackage.ROBOT_DEFINITION:
				sequence_RobotDefinition(context, (RobotDefinition) semanticObject); 
				return; 
			case MyDslPackage.RUN_STATEMENT:
				sequence_RunStatement(context, (RunStatement) semanticObject); 
				return; 
			case MyDslPackage.SIMULATE_STATEMENT:
				sequence_SimulateStatement(context, (SimulateStatement) semanticObject); 
				return; 
			case MyDslPackage.TASK_DEFINITION:
				sequence_TaskDefinition(context, (TaskDefinition) semanticObject); 
				return; 
			case MyDslPackage.TASK_STATEMENT:
				sequence_TaskStatement(context, (TaskStatement) semanticObject); 
				return; 
			case MyDslPackage.TEAM_DEFINITION:
				sequence_TeamDefinition(context, (TeamDefinition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (team=[TeamDefinition|ID] robot=[RobotDefinition|ID] goal=[GoalDefinition|ID] comparator=Comparator distance=INT)
	 * </pre>
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONDITION__TEAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONDITION__TEAM));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONDITION__ROBOT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONDITION__ROBOT));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONDITION__GOAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONDITION__GOAL));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONDITION__COMPARATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONDITION__COMPARATOR));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.CONDITION__DISTANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.CONDITION__DISTANCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionAccess().getTeamTeamDefinitionIDTerminalRuleCall_0_0_1(), semanticObject.eGet(MyDslPackage.Literals.CONDITION__TEAM, false));
		feeder.accept(grammarAccess.getConditionAccess().getRobotRobotDefinitionIDTerminalRuleCall_2_0_1(), semanticObject.eGet(MyDslPackage.Literals.CONDITION__ROBOT, false));
		feeder.accept(grammarAccess.getConditionAccess().getGoalGoalDefinitionIDTerminalRuleCall_4_0_1(), semanticObject.eGet(MyDslPackage.Literals.CONDITION__GOAL, false));
		feeder.accept(grammarAccess.getConditionAccess().getComparatorComparatorParserRuleCall_5_0(), semanticObject.getComparator());
		feeder.accept(grammarAccess.getConditionAccess().getDistanceINTTerminalRuleCall_6_0(), semanticObject.getDistance());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Team_goal_or_task returns GoalDefinition
	 *     GoalDefinition returns GoalDefinition
	 *
	 * Constraint:
	 *     (name=ID x=INT y=INT)
	 * </pre>
	 */
	protected void sequence_GoalDefinition(ISerializationContext context, GoalDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TEAM_GOAL_OR_TASK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TEAM_GOAL_OR_TASK__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.GOAL_DEFINITION__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.GOAL_DEFINITION__X));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.GOAL_DEFINITION__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.GOAL_DEFINITION__Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGoalDefinitionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGoalDefinitionAccess().getXINTTerminalRuleCall_4_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getGoalDefinitionAccess().getYINTTerminalRuleCall_6_0(), semanticObject.getY());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (statements+=Team_goal_or_task* simulate=SimulateStatement)
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MoveToStatement returns MoveToStatement
	 *
	 * Constraint:
	 *     goal=[GoalDefinition|ID]
	 * </pre>
	 */
	protected void sequence_MoveToStatement(ISerializationContext context, MoveToStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.MOVE_TO_STATEMENT__GOAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.MOVE_TO_STATEMENT__GOAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMoveToStatementAccess().getGoalGoalDefinitionIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MyDslPackage.Literals.MOVE_TO_STATEMENT__GOAL, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RobotDefinition returns RobotDefinition
	 *
	 * Constraint:
	 *     (name=ID x=INT y=INT)
	 * </pre>
	 */
	protected void sequence_RobotDefinition(ISerializationContext context, RobotDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ROBOT_DEFINITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ROBOT_DEFINITION__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ROBOT_DEFINITION__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ROBOT_DEFINITION__X));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.ROBOT_DEFINITION__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.ROBOT_DEFINITION__Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRobotDefinitionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRobotDefinitionAccess().getXINTTerminalRuleCall_4_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getRobotDefinitionAccess().getYINTTerminalRuleCall_6_0(), semanticObject.getY());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RunStatement returns RunStatement
	 *
	 * Constraint:
	 *     function=[TaskDefinition|ID]
	 * </pre>
	 */
	protected void sequence_RunStatement(ISerializationContext context, RunStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RUN_STATEMENT__FUNCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RUN_STATEMENT__FUNCTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRunStatementAccess().getFunctionTaskDefinitionIDTerminalRuleCall_1_0_1(), semanticObject.eGet(MyDslPackage.Literals.RUN_STATEMENT__FUNCTION, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     SimulateStatement returns SimulateStatement
	 *
	 * Constraint:
	 *     (condition=Condition runs+=RunStatement+)
	 * </pre>
	 */
	protected void sequence_SimulateStatement(ISerializationContext context, SimulateStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Team_goal_or_task returns TaskDefinition
	 *     TaskDefinition returns TaskDefinition
	 *
	 * Constraint:
	 *     (name=ID condition=Condition? statements+=TaskStatement*)
	 * </pre>
	 */
	protected void sequence_TaskDefinition(ISerializationContext context, TaskDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TaskStatement returns TaskStatement
	 *
	 * Constraint:
	 *     (team=[TeamDefinition|ID] robot=[RobotDefinition|ID]? statement=MoveToStatement?)
	 * </pre>
	 */
	protected void sequence_TaskStatement(ISerializationContext context, TaskStatement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Team_goal_or_task returns TeamDefinition
	 *     TeamDefinition returns TeamDefinition
	 *
	 * Constraint:
	 *     (name=ID robots+=RobotDefinition*)
	 * </pre>
	 */
	protected void sequence_TeamDefinition(ISerializationContext context, TeamDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
