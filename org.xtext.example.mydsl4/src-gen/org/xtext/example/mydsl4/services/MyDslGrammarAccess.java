/*
 * generated by Xtext 2.36.0
 */
package org.xtext.example.mydsl4.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementsTeam_goal_or_taskParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final Assignment cSimulateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSimulateSimulateStatementParserRuleCall_1_0 = (RuleCall)cSimulateAssignment_1.eContents().get(0);
		
		//Model:
		//    statements+=Team_goal_or_task* simulate=SimulateStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Team_goal_or_task* simulate=SimulateStatement
		public Group getGroup() { return cGroup; }
		
		//statements+=Team_goal_or_task*
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }
		
		//Team_goal_or_task
		public RuleCall getStatementsTeam_goal_or_taskParserRuleCall_0_0() { return cStatementsTeam_goal_or_taskParserRuleCall_0_0; }
		
		//simulate=SimulateStatement
		public Assignment getSimulateAssignment_1() { return cSimulateAssignment_1; }
		
		//SimulateStatement
		public RuleCall getSimulateSimulateStatementParserRuleCall_1_0() { return cSimulateSimulateStatementParserRuleCall_1_0; }
	}
	public class Team_goal_or_taskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Team_goal_or_task");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTeamDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGoalDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTaskDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Team_goal_or_task:
		//    TeamDefinition | GoalDefinition | TaskDefinition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TeamDefinition | GoalDefinition | TaskDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TeamDefinition
		public RuleCall getTeamDefinitionParserRuleCall_0() { return cTeamDefinitionParserRuleCall_0; }
		
		//GoalDefinition
		public RuleCall getGoalDefinitionParserRuleCall_1() { return cGoalDefinitionParserRuleCall_1; }
		
		//TaskDefinition
		public RuleCall getTaskDefinitionParserRuleCall_2() { return cTaskDefinitionParserRuleCall_2; }
	}
	public class TeamDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.TeamDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTeamKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRobotsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRobotsRobotDefinitionParserRuleCall_3_0 = (RuleCall)cRobotsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TeamDefinition:
		//    'Team' name=ID '{' robots+=RobotDefinition* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Team' name=ID '{' robots+=RobotDefinition* '}'
		public Group getGroup() { return cGroup; }
		
		//'Team'
		public Keyword getTeamKeyword_0() { return cTeamKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//robots+=RobotDefinition*
		public Assignment getRobotsAssignment_3() { return cRobotsAssignment_3; }
		
		//RobotDefinition
		public RuleCall getRobotsRobotDefinitionParserRuleCall_3_0() { return cRobotsRobotDefinitionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RobotDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.RobotDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRobotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cXAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXINTTerminalRuleCall_4_0 = (RuleCall)cXAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cYAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cYINTTerminalRuleCall_6_0 = (RuleCall)cYAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RobotDefinition:
		//    'Robot' name=ID 'at' '(' x=INT ',' y=INT ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Robot' name=ID 'at' '(' x=INT ',' y=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'Robot'
		public Keyword getRobotKeyword_0() { return cRobotKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'at'
		public Keyword getAtKeyword_2() { return cAtKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//x=INT
		public Assignment getXAssignment_4() { return cXAssignment_4; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_4_0() { return cXINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//y=INT
		public Assignment getYAssignment_6() { return cYAssignment_6; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_6_0() { return cYINTTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class GoalDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.GoalDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cXAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXINTTerminalRuleCall_4_0 = (RuleCall)cXAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cYAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cYINTTerminalRuleCall_6_0 = (RuleCall)cYAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//GoalDefinition:
		//    'Goal' name=ID 'at' '(' x=INT ',' y=INT ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Goal' name=ID 'at' '(' x=INT ',' y=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'Goal'
		public Keyword getGoalKeyword_0() { return cGoalKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'at'
		public Keyword getAtKeyword_2() { return cAtKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//x=INT
		public Assignment getXAssignment_4() { return cXAssignment_4; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_4_0() { return cXINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//y=INT
		public Assignment getYAssignment_6() { return cYAssignment_6; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_6_0() { return cYINTTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class TaskDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.TaskDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsTaskStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TaskDefinition:
		//    'Task' name=ID ('if' condition=Condition)? '{' statements+=TaskStatement* '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Task' name=ID ('if' condition=Condition)? '{' statements+=TaskStatement* '}'
		public Group getGroup() { return cGroup; }
		
		//'Task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('if' condition=Condition)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_1_0() { return cConditionConditionParserRuleCall_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//statements+=TaskStatement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//TaskStatement
		public RuleCall getStatementsTaskStatementParserRuleCall_4_0() { return cStatementsTaskStatementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTeamAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTeamTeamDefinitionCrossReference_0_0 = (CrossReference)cTeamAssignment_0.eContents().get(0);
		private final RuleCall cTeamTeamDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cTeamTeamDefinitionCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRobotAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRobotRobotDefinitionCrossReference_2_0 = (CrossReference)cRobotAssignment_2.eContents().get(0);
		private final RuleCall cRobotRobotDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cRobotRobotDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cDistanceToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGoalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cGoalGoalDefinitionCrossReference_4_0 = (CrossReference)cGoalAssignment_4.eContents().get(0);
		private final RuleCall cGoalGoalDefinitionIDTerminalRuleCall_4_0_1 = (RuleCall)cGoalGoalDefinitionCrossReference_4_0.eContents().get(1);
		private final Assignment cComparatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComparatorComparatorParserRuleCall_5_0 = (RuleCall)cComparatorAssignment_5.eContents().get(0);
		private final Assignment cDistanceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDistanceINTTerminalRuleCall_6_0 = (RuleCall)cDistanceAssignment_6.eContents().get(0);
		
		//Condition:
		//    team=[TeamDefinition] ':' robot=[RobotDefinition] 'distanceTo' goal=[GoalDefinition] comparator=Comparator distance=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//team=[TeamDefinition] ':' robot=[RobotDefinition] 'distanceTo' goal=[GoalDefinition] comparator=Comparator distance=INT
		public Group getGroup() { return cGroup; }
		
		//team=[TeamDefinition]
		public Assignment getTeamAssignment_0() { return cTeamAssignment_0; }
		
		//[TeamDefinition]
		public CrossReference getTeamTeamDefinitionCrossReference_0_0() { return cTeamTeamDefinitionCrossReference_0_0; }
		
		//ID
		public RuleCall getTeamTeamDefinitionIDTerminalRuleCall_0_0_1() { return cTeamTeamDefinitionIDTerminalRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//robot=[RobotDefinition]
		public Assignment getRobotAssignment_2() { return cRobotAssignment_2; }
		
		//[RobotDefinition]
		public CrossReference getRobotRobotDefinitionCrossReference_2_0() { return cRobotRobotDefinitionCrossReference_2_0; }
		
		//ID
		public RuleCall getRobotRobotDefinitionIDTerminalRuleCall_2_0_1() { return cRobotRobotDefinitionIDTerminalRuleCall_2_0_1; }
		
		//'distanceTo'
		public Keyword getDistanceToKeyword_3() { return cDistanceToKeyword_3; }
		
		//goal=[GoalDefinition]
		public Assignment getGoalAssignment_4() { return cGoalAssignment_4; }
		
		//[GoalDefinition]
		public CrossReference getGoalGoalDefinitionCrossReference_4_0() { return cGoalGoalDefinitionCrossReference_4_0; }
		
		//ID
		public RuleCall getGoalGoalDefinitionIDTerminalRuleCall_4_0_1() { return cGoalGoalDefinitionIDTerminalRuleCall_4_0_1; }
		
		//comparator=Comparator
		public Assignment getComparatorAssignment_5() { return cComparatorAssignment_5; }
		
		//Comparator
		public RuleCall getComparatorComparatorParserRuleCall_5_0() { return cComparatorComparatorParserRuleCall_5_0; }
		
		//distance=INT
		public Assignment getDistanceAssignment_6() { return cDistanceAssignment_6; }
		
		//INT
		public RuleCall getDistanceINTTerminalRuleCall_6_0() { return cDistanceINTTerminalRuleCall_6_0; }
	}
	public class ComparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.Comparator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIsLessThanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIsGreaterThanKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIsEqualKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Comparator:
		//    'isLessThan' | 'isGreaterThan' | 'isEqual'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'isLessThan' | 'isGreaterThan' | 'isEqual'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'isLessThan'
		public Keyword getIsLessThanKeyword_0() { return cIsLessThanKeyword_0; }
		
		//'isGreaterThan'
		public Keyword getIsGreaterThanKeyword_1() { return cIsGreaterThanKeyword_1; }
		
		//'isEqual'
		public Keyword getIsEqualKeyword_2() { return cIsEqualKeyword_2; }
	}
	public class TaskStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.TaskStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTeamAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTeamTeamDefinitionCrossReference_0_0 = (CrossReference)cTeamAssignment_0.eContents().get(0);
		private final RuleCall cTeamTeamDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cTeamTeamDefinitionCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRobotAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cRobotRobotDefinitionCrossReference_1_1_0 = (CrossReference)cRobotAssignment_1_1.eContents().get(0);
		private final RuleCall cRobotRobotDefinitionIDTerminalRuleCall_1_1_0_1 = (RuleCall)cRobotRobotDefinitionCrossReference_1_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cStatementMoveToStatementParserRuleCall_2_0_0 = (RuleCall)cStatementAssignment_2_0.eContents().get(0);
		private final Keyword cTurnOffKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//TaskStatement:
		//    team=[TeamDefinition] (':' robot=[RobotDefinition|ID])? (statement=MoveToStatement | 'turnOff')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//team=[TeamDefinition] (':' robot=[RobotDefinition|ID])? (statement=MoveToStatement | 'turnOff')
		public Group getGroup() { return cGroup; }
		
		//team=[TeamDefinition]
		public Assignment getTeamAssignment_0() { return cTeamAssignment_0; }
		
		//[TeamDefinition]
		public CrossReference getTeamTeamDefinitionCrossReference_0_0() { return cTeamTeamDefinitionCrossReference_0_0; }
		
		//ID
		public RuleCall getTeamTeamDefinitionIDTerminalRuleCall_0_0_1() { return cTeamTeamDefinitionIDTerminalRuleCall_0_0_1; }
		
		//(':' robot=[RobotDefinition|ID])?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//robot=[RobotDefinition|ID]
		public Assignment getRobotAssignment_1_1() { return cRobotAssignment_1_1; }
		
		//[RobotDefinition|ID]
		public CrossReference getRobotRobotDefinitionCrossReference_1_1_0() { return cRobotRobotDefinitionCrossReference_1_1_0; }
		
		//ID
		public RuleCall getRobotRobotDefinitionIDTerminalRuleCall_1_1_0_1() { return cRobotRobotDefinitionIDTerminalRuleCall_1_1_0_1; }
		
		//(statement=MoveToStatement | 'turnOff')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//statement=MoveToStatement
		public Assignment getStatementAssignment_2_0() { return cStatementAssignment_2_0; }
		
		//MoveToStatement
		public RuleCall getStatementMoveToStatementParserRuleCall_2_0_0() { return cStatementMoveToStatementParserRuleCall_2_0_0; }
		
		//'turnOff'
		public Keyword getTurnOffKeyword_2_1() { return cTurnOffKeyword_2_1; }
	}
	public class MoveToStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.MoveToStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGoalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cGoalGoalDefinitionCrossReference_1_0 = (CrossReference)cGoalAssignment_1.eContents().get(0);
		private final RuleCall cGoalGoalDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cGoalGoalDefinitionCrossReference_1_0.eContents().get(1);
		
		//MoveToStatement:
		//     'moveTo' goal=[GoalDefinition]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'moveTo' goal=[GoalDefinition]
		public Group getGroup() { return cGroup; }
		
		//'moveTo'
		public Keyword getMoveToKeyword_0() { return cMoveToKeyword_0; }
		
		//goal=[GoalDefinition]
		public Assignment getGoalAssignment_1() { return cGoalAssignment_1; }
		
		//[GoalDefinition]
		public CrossReference getGoalGoalDefinitionCrossReference_1_0() { return cGoalGoalDefinitionCrossReference_1_0; }
		
		//ID
		public RuleCall getGoalGoalDefinitionIDTerminalRuleCall_1_0_1() { return cGoalGoalDefinitionIDTerminalRuleCall_1_0_1; }
	}
	public class SimulateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.SimulateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSimulateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cUntilKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRunsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRunsRunStatementParserRuleCall_4_0 = (RuleCall)cRunsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SimulateStatement:
		//    'Simulate' 'until' condition=Condition '{' runs+=RunStatement+ '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Simulate' 'until' condition=Condition '{' runs+=RunStatement+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Simulate'
		public Keyword getSimulateKeyword_0() { return cSimulateKeyword_0; }
		
		//'until'
		public Keyword getUntilKeyword_1() { return cUntilKeyword_1; }
		
		//condition=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//runs+=RunStatement+
		public Assignment getRunsAssignment_4() { return cRunsAssignment_4; }
		
		//RunStatement
		public RuleCall getRunsRunStatementParserRuleCall_4_0() { return cRunsRunStatementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class RunStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl4.MyDsl.RunStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRunKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionTaskDefinitionCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionTaskDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cFunctionTaskDefinitionCrossReference_1_0.eContents().get(1);
		
		//RunStatement:
		//    'Run' function=[TaskDefinition]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Run' function=[TaskDefinition]
		public Group getGroup() { return cGroup; }
		
		//'Run'
		public Keyword getRunKeyword_0() { return cRunKeyword_0; }
		
		//function=[TaskDefinition]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//[TaskDefinition]
		public CrossReference getFunctionTaskDefinitionCrossReference_1_0() { return cFunctionTaskDefinitionCrossReference_1_0; }
		
		//ID
		public RuleCall getFunctionTaskDefinitionIDTerminalRuleCall_1_0_1() { return cFunctionTaskDefinitionIDTerminalRuleCall_1_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final Team_goal_or_taskElements pTeam_goal_or_task;
	private final TeamDefinitionElements pTeamDefinition;
	private final RobotDefinitionElements pRobotDefinition;
	private final GoalDefinitionElements pGoalDefinition;
	private final TaskDefinitionElements pTaskDefinition;
	private final ConditionElements pCondition;
	private final ComparatorElements pComparator;
	private final TaskStatementElements pTaskStatement;
	private final MoveToStatementElements pMoveToStatement;
	private final SimulateStatementElements pSimulateStatement;
	private final RunStatementElements pRunStatement;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTeam_goal_or_task = new Team_goal_or_taskElements();
		this.pTeamDefinition = new TeamDefinitionElements();
		this.pRobotDefinition = new RobotDefinitionElements();
		this.pGoalDefinition = new GoalDefinitionElements();
		this.pTaskDefinition = new TaskDefinitionElements();
		this.pCondition = new ConditionElements();
		this.pComparator = new ComparatorElements();
		this.pTaskStatement = new TaskStatementElements();
		this.pMoveToStatement = new MoveToStatementElements();
		this.pSimulateStatement = new SimulateStatementElements();
		this.pRunStatement = new RunStatementElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl4.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    statements+=Team_goal_or_task* simulate=SimulateStatement;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Team_goal_or_task:
	//    TeamDefinition | GoalDefinition | TaskDefinition
	//;
	public Team_goal_or_taskElements getTeam_goal_or_taskAccess() {
		return pTeam_goal_or_task;
	}
	
	public ParserRule getTeam_goal_or_taskRule() {
		return getTeam_goal_or_taskAccess().getRule();
	}
	
	//TeamDefinition:
	//    'Team' name=ID '{' robots+=RobotDefinition* '}'
	//;
	public TeamDefinitionElements getTeamDefinitionAccess() {
		return pTeamDefinition;
	}
	
	public ParserRule getTeamDefinitionRule() {
		return getTeamDefinitionAccess().getRule();
	}
	
	//RobotDefinition:
	//    'Robot' name=ID 'at' '(' x=INT ',' y=INT ')'
	//;
	public RobotDefinitionElements getRobotDefinitionAccess() {
		return pRobotDefinition;
	}
	
	public ParserRule getRobotDefinitionRule() {
		return getRobotDefinitionAccess().getRule();
	}
	
	//GoalDefinition:
	//    'Goal' name=ID 'at' '(' x=INT ',' y=INT ')'
	//;
	public GoalDefinitionElements getGoalDefinitionAccess() {
		return pGoalDefinition;
	}
	
	public ParserRule getGoalDefinitionRule() {
		return getGoalDefinitionAccess().getRule();
	}
	
	//TaskDefinition:
	//    'Task' name=ID ('if' condition=Condition)? '{' statements+=TaskStatement* '}'
	//;
	public TaskDefinitionElements getTaskDefinitionAccess() {
		return pTaskDefinition;
	}
	
	public ParserRule getTaskDefinitionRule() {
		return getTaskDefinitionAccess().getRule();
	}
	
	//Condition:
	//    team=[TeamDefinition] ':' robot=[RobotDefinition] 'distanceTo' goal=[GoalDefinition] comparator=Comparator distance=INT
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Comparator:
	//    'isLessThan' | 'isGreaterThan' | 'isEqual'
	//;
	public ComparatorElements getComparatorAccess() {
		return pComparator;
	}
	
	public ParserRule getComparatorRule() {
		return getComparatorAccess().getRule();
	}
	
	//TaskStatement:
	//    team=[TeamDefinition] (':' robot=[RobotDefinition|ID])? (statement=MoveToStatement | 'turnOff')
	//;
	public TaskStatementElements getTaskStatementAccess() {
		return pTaskStatement;
	}
	
	public ParserRule getTaskStatementRule() {
		return getTaskStatementAccess().getRule();
	}
	
	//MoveToStatement:
	//     'moveTo' goal=[GoalDefinition]
	//;
	public MoveToStatementElements getMoveToStatementAccess() {
		return pMoveToStatement;
	}
	
	public ParserRule getMoveToStatementRule() {
		return getMoveToStatementAccess().getRule();
	}
	
	//SimulateStatement:
	//    'Simulate' 'until' condition=Condition '{' runs+=RunStatement+ '}'
	//;
	public SimulateStatementElements getSimulateStatementAccess() {
		return pSimulateStatement;
	}
	
	public ParserRule getSimulateStatementRule() {
		return getSimulateStatementAccess().getRule();
	}
	
	//RunStatement:
	//    'Run' function=[TaskDefinition]
	//;
	public RunStatementElements getRunStatementAccess() {
		return pRunStatement;
	}
	
	public ParserRule getRunStatementRule() {
		return getRunStatementAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
