/*
 * generated by Xtext 2.36.0
 */
package org.xtext.example.mydsl4.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl4.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl4.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTeam_goal_or_taskAccess().getAlternatives(), "rule__Team_goal_or_task__Alternatives");
			builder.put(grammarAccess.getComparatorAccess().getAlternatives(), "rule__Comparator__Alternatives");
			builder.put(grammarAccess.getTaskStatementAccess().getAlternatives_2(), "rule__TaskStatement__Alternatives_2");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getTeamDefinitionAccess().getGroup(), "rule__TeamDefinition__Group__0");
			builder.put(grammarAccess.getRobotDefinitionAccess().getGroup(), "rule__RobotDefinition__Group__0");
			builder.put(grammarAccess.getGoalDefinitionAccess().getGroup(), "rule__GoalDefinition__Group__0");
			builder.put(grammarAccess.getTaskDefinitionAccess().getGroup(), "rule__TaskDefinition__Group__0");
			builder.put(grammarAccess.getTaskDefinitionAccess().getGroup_2(), "rule__TaskDefinition__Group_2__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getTaskStatementAccess().getGroup(), "rule__TaskStatement__Group__0");
			builder.put(grammarAccess.getTaskStatementAccess().getGroup_1(), "rule__TaskStatement__Group_1__0");
			builder.put(grammarAccess.getMoveToStatementAccess().getGroup(), "rule__MoveToStatement__Group__0");
			builder.put(grammarAccess.getSimulateStatementAccess().getGroup(), "rule__SimulateStatement__Group__0");
			builder.put(grammarAccess.getRunStatementAccess().getGroup(), "rule__RunStatement__Group__0");
			builder.put(grammarAccess.getModelAccess().getStatementsAssignment_0(), "rule__Model__StatementsAssignment_0");
			builder.put(grammarAccess.getModelAccess().getSimulateAssignment_1(), "rule__Model__SimulateAssignment_1");
			builder.put(grammarAccess.getTeamDefinitionAccess().getNameAssignment_1(), "rule__TeamDefinition__NameAssignment_1");
			builder.put(grammarAccess.getTeamDefinitionAccess().getRobotsAssignment_3(), "rule__TeamDefinition__RobotsAssignment_3");
			builder.put(grammarAccess.getRobotDefinitionAccess().getNameAssignment_1(), "rule__RobotDefinition__NameAssignment_1");
			builder.put(grammarAccess.getRobotDefinitionAccess().getXAssignment_4(), "rule__RobotDefinition__XAssignment_4");
			builder.put(grammarAccess.getRobotDefinitionAccess().getYAssignment_6(), "rule__RobotDefinition__YAssignment_6");
			builder.put(grammarAccess.getGoalDefinitionAccess().getNameAssignment_1(), "rule__GoalDefinition__NameAssignment_1");
			builder.put(grammarAccess.getGoalDefinitionAccess().getXAssignment_4(), "rule__GoalDefinition__XAssignment_4");
			builder.put(grammarAccess.getGoalDefinitionAccess().getYAssignment_6(), "rule__GoalDefinition__YAssignment_6");
			builder.put(grammarAccess.getTaskDefinitionAccess().getNameAssignment_1(), "rule__TaskDefinition__NameAssignment_1");
			builder.put(grammarAccess.getTaskDefinitionAccess().getConditionAssignment_2_1(), "rule__TaskDefinition__ConditionAssignment_2_1");
			builder.put(grammarAccess.getTaskDefinitionAccess().getStatementsAssignment_4(), "rule__TaskDefinition__StatementsAssignment_4");
			builder.put(grammarAccess.getConditionAccess().getTeamAssignment_0(), "rule__Condition__TeamAssignment_0");
			builder.put(grammarAccess.getConditionAccess().getRobotAssignment_2(), "rule__Condition__RobotAssignment_2");
			builder.put(grammarAccess.getConditionAccess().getGoalAssignment_4(), "rule__Condition__GoalAssignment_4");
			builder.put(grammarAccess.getConditionAccess().getComparatorAssignment_5(), "rule__Condition__ComparatorAssignment_5");
			builder.put(grammarAccess.getConditionAccess().getDistanceAssignment_6(), "rule__Condition__DistanceAssignment_6");
			builder.put(grammarAccess.getTaskStatementAccess().getTeamAssignment_0(), "rule__TaskStatement__TeamAssignment_0");
			builder.put(grammarAccess.getTaskStatementAccess().getRobotAssignment_1_1(), "rule__TaskStatement__RobotAssignment_1_1");
			builder.put(grammarAccess.getTaskStatementAccess().getStatementAssignment_2_0(), "rule__TaskStatement__StatementAssignment_2_0");
			builder.put(grammarAccess.getMoveToStatementAccess().getGoalAssignment_1(), "rule__MoveToStatement__GoalAssignment_1");
			builder.put(grammarAccess.getSimulateStatementAccess().getConditionAssignment_2(), "rule__SimulateStatement__ConditionAssignment_2");
			builder.put(grammarAccess.getSimulateStatementAccess().getRunsAssignment_4(), "rule__SimulateStatement__RunsAssignment_4");
			builder.put(grammarAccess.getRunStatementAccess().getFunctionAssignment_1(), "rule__RunStatement__FunctionAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
